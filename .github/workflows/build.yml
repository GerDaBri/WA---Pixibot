name: Build/release

on:
  push:
    tags:
      - '*-v*'

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Extract brand and version from tag
        id: extract_brand
        run: |
          # Extract brand name from tag (format: brand-v1.2.3)
          $tagName = $env:GITHUB_REF_NAME
          $brandName = $tagName -replace '-v.*', ''
          $version = $tagName -replace '.*-v', ''

          "tag_name=$tagName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "brand_name=$brandName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

          Write-Host "Detected brand: $brandName"
          Write-Host "Version: $version"

      - name: Validate brand configuration
        run: |
          $brandConfig = "brands/${{ steps.extract_brand.outputs.brand_name }}/brand.config.json"
          if (!(Test-Path $brandConfig)) {
            Write-Host "Error: Brand configuration not found: $brandConfig"
            exit 1
          }
          Write-Host "Brand configuration found: $brandConfig"

      - name: Apply brand configuration
        run: |
          $brandName = "${{ steps.extract_brand.outputs.brand_name }}"
          $brandConfigPath = "brands/$brandName/brand.config.json"
          
          Write-Host "üè∑Ô∏è  Applying brand configuration for: $brandName"
          
          # Load brand configuration
          $brandConfig = Get-Content $brandConfigPath | ConvertFrom-Json
          Write-Host "‚úì Loaded configuration for $($brandConfig.displayName)"
          
          # Load package.json
          $packageJson = Get-Content "package.json" | ConvertFrom-Json
          
          # Apply brand-specific configuration to package.json
          $packageJson.name = $brandConfig.name
          $packageJson.version = $brandConfig.version
          $packageJson.description = $brandConfig.description
          $packageJson.author = $brandConfig.author
          $packageJson.license = $brandConfig.license
          
          # Update build configuration
          $packageJson.build.appId = $brandConfig.appId
          $packageJson.build.productName = $brandConfig.productName
          $packageJson.build.publish.owner = $brandConfig.github.owner
          $packageJson.build.publish.repo = $brandConfig.github.repo
          $packageJson.build.publish.releaseType = $brandConfig.github.releaseType
          
          # Write modified package.json
          $packageJson | ConvertTo-Json -Depth 10 | Set-Content "package.json"
          Write-Host "‚úì Applied brand configuration to package.json"
          Write-Host "  - Product Name: $($brandConfig.productName)"
          Write-Host "  - App ID: $($brandConfig.appId)"
          Write-Host "  - Repository: $($brandConfig.github.owner)/$($brandConfig.github.repo)"

      - name: Copy brand assets
        run: |
          $brandName = "${{ steps.extract_brand.outputs.brand_name }}"
          $brandAssetsDir = "brands/$brandName/assets"
          $assetsDir = "assets"
          
          Write-Host "üì¶ Copying brand assets..."
          
          # Remove existing assets
          if (Test-Path $assetsDir) {
            Remove-Item -Path $assetsDir -Recurse -Force
          }
          
          # Copy brand assets
          if (Test-Path $brandAssetsDir) {
            Copy-Item -Path $brandAssetsDir -Destination $assetsDir -Recurse
            Write-Host "‚úì Copied brand assets"
            
            # Load brand config to get logo path
            $brandConfigPath = "brands/$brandName/brand.config.json"
            $brandConfig = Get-Content $brandConfigPath | ConvertFrom-Json
            
            # Copy specific logo as logo-principal.png for consistent import
            if ($brandConfig.assets.logo) {
              $logoPath = Join-Path $brandAssetsDir $brandConfig.assets.logo
              $targetLogoPath = "assets/logos/logo-principal.png"
              if (Test-Path $logoPath) {
                Copy-Item -Path $logoPath -Destination $targetLogoPath -Force
                Write-Host "‚úì Copied brand logo"
              }
            }
          } else {
            Write-Host "Warning: Brand assets directory not found: $brandAssetsDir"
          }

      - name: Copy brand index.html
        run: |
          $brandName = "${{ steps.extract_brand.outputs.brand_name }}"
          $brandIndexHtml = "brands/$brandName/index.html"
          $targetIndexHtml = "src/index.html"
          
          if (Test-Path $brandIndexHtml) {
            Copy-Item -Path $brandIndexHtml -Destination $targetIndexHtml -Force
            Write-Host "‚úì Copied brand index.html"
          } else {
            Write-Host "Warning: Brand index.html not found: $brandIndexHtml"
          }

      - name: Build webpack
        run: |
          Write-Host "üöÄ Building webpack bundle..."
          npm run webpack-build
          Write-Host "‚úì Webpack build completed"

      - name: Determine GitHub token
        id: determine_token
        run: |
          $brandName = "${{ steps.extract_brand.outputs.brand_name }}"
          Write-Host "üîë Determining GitHub token for brand: $brandName"
          
          # Map brand names to their respective token secrets
          # Pixibot uses the default github_token (same repo)
          # Other brands need their own tokens for cross-repo publishing
          switch ($brandName) {
            "pixibot" {
              "use_custom_token=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
              Write-Host "‚úì Using default GITHUB_TOKEN for Pixibot"
            }
            "elevatehub" {
              "use_custom_token=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
              "token_secret=ELEVATEHUB_RELEASE_TOKEN" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
              Write-Host "‚úì Using ELEVATEHUB_RELEASE_TOKEN for ElevateHub"
            }
            default {
              Write-Host "‚ö†Ô∏è  Unknown brand: $brandName"
              Write-Host "   Add token mapping in workflow for this brand"
              exit 1
            }
          }

      - name: Build/release Electron app (default token)
        if: steps.determine_token.outputs.use_custom_token == 'false'
        uses: samuelmeuli/action-electron-builder@v1
        with:
          # GitHub token, automatically provided to the action
          github_token: ${{ secrets.github_token }}
          release: true
          skip_build: true
          args: --publish=always

      - name: Build/release Electron app (custom token)
        if: steps.determine_token.outputs.use_custom_token == 'true'
        uses: samuelmeuli/action-electron-builder@v1
        with:
          # Use brand-specific token for cross-repo publishing
          github_token: ${{ secrets[steps.determine_token.outputs.token_secret] }}
          release: true
          skip_build: true
          args: --publish=always